@function pow($num, $exp) {
    $result: 1;

    @if $exp > 0 {
        @for $i from 1 through $exp {
            $result: $result * $num;
        }
    } @else {
        @for $i from $exp to 0 {
            $result: $result / $num;
        }
    }

    @return $result;
}

@function charsFromBase($base: 10) {
    $chars: (
        // Binary
        2: "01",
        // Octal
        8: "01234567",
        // Decimal
        10: "0123456789",
        // Hexadecimal
        16: "0123456789abcdef",
        // Base 36
        36: "0123456789abcdefghijklmnopqrstuvwxyz",
        // Base 64
        64: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    );

    @if not map-has-key($chars, $base) {
        @warn "There is no base `#{$base}` available.";
    }
    @return map-get($chars, $base);
}

@function toString($num, $radix: 10) {
    $chars: charsFromBase($radix);
    $result: "";
    $sign: "";

    @if $num < 0 {
        $sign: "-";
        $num: abs($num);
    }

    @if $num >= 0 and $num < $radix {
        @return $sign + str-slice($chars, ($num + 1), ($num + 1));
    }

    $q: $num;
    @while $q != 0 {
        $r: $q % $radix;
        $q: floor($q / $radix);
        $result: str-slice($chars, ($r + 1), ($r + 1)) + $result;
    }

    @return $sign + $result;
}

@function parseInt($str, $radix: 10) {
    $chars: charsFromBase($radix);
    $result: 0;

    $is-negative: str-index($str, "-") == 1;

    @if $is-negative {
        $str: str-slice($str, 2);
    }

    @for $i from 1 through str-length($str) {
        $char: str-slice($str, -$i, -$i);
        $value: str-index($chars, $char) - 1;
        $result: $result + ($value * pow($radix, ($i - 1)));
    }

    @return if($is-negative, -$result, $result);
}

@function sub-string($text, $firstIndex, $secondIndex) {
    $result: "";
    @for $i from 0 to length($text) {
        @if $i >= $firstIndex and $i <= $secondIndex {
            $result: $result + $text[#{$i}];
        }
    }
    @return $result;
}

@function shadeColor($color, $percent) {
    @debug "COLOR>>>" + $color;
    $R: parseInt(sub-string($color, 1, 3), 16);
    $G: parseInt(sub-string($color, 3, 5), 16);
    $B: parseInt(sub-string($color, 5, 7), 16);

    $R: parseInt($R * (100 + $percent) / 100);
    $G: parseInt($G * (100 + $percent) / 100);
    $B: parseInt($B * (100 + $percent) / 100);

    @if $R >= 255 {
        $R: 255;
    }
    @if $G >= 255 {
        $G: 255;
    }
    @if $B >= 255 {
        $B: 255;
    }
    $RR: 0;
    $GG: 0;
    $BB: 0;

    $strR: toString($R, 16);
    $strG: toString($G, 16);
    $strB: toString($B, 16);

    @if length($strR) == 1 {
        $RR: "0" + $strR;
    } @else {
        $RR: $strR;
    }
    @if length($strG) == 1 {
        $GG: "0" + $strG;
    } @else {
        $GG: $strG;
    }
    @if length($strB) == 1 {
        $BB: "0" + $strB;
    } @else {
        $BB: $strB;
    }
    @return "#" + $RR + $GG + $BB;
}
@function transparentize($color, $percent) {
    @return rgba($color, $percent);
}
